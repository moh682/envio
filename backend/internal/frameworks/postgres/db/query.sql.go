// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getAllInvoicesByOrganizationId = `-- name: GetAllInvoicesByOrganizationId :many
SELECT organization_id, number, financial_year, issue_date, name, email, phone, car_registration, total, is_vat FROM invoices WHERE organization_id = $1
`

func (q *Queries) GetAllInvoicesByOrganizationId(ctx context.Context, organizationID uuid.UUID) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, getAllInvoicesByOrganizationId, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.OrganizationID,
			&i.Number,
			&i.FinancialYear,
			&i.IssueDate,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.CarRegistration,
			&i.Total,
			&i.IsVat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProductsByInvoiceId = `-- name: GetAllProductsByInvoiceId :many
SELECT id, invoice_number, organization_id, serial, description, quantity, rate, total FROM invoice_products WHERE organization_id = $1 AND invoice_number = $2
`

type GetAllProductsByInvoiceIdParams struct {
	OrganizationID uuid.UUID
	InvoiceNumber  int32
}

func (q *Queries) GetAllProductsByInvoiceId(ctx context.Context, arg GetAllProductsByInvoiceIdParams) ([]InvoiceProduct, error) {
	rows, err := q.db.QueryContext(ctx, getAllProductsByInvoiceId, arg.OrganizationID, arg.InvoiceNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InvoiceProduct
	for rows.Next() {
		var i InvoiceProduct
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceNumber,
			&i.OrganizationID,
			&i.Serial,
			&i.Description,
			&i.Quantity,
			&i.Rate,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
