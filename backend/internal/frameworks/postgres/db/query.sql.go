// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createFinancialYear = `-- name: CreateFinancialYear :exec
INSERT INTO financial_years (
	organization_id,
	year
) VALUES (
	$1,
	$2
)
`

type CreateFinancialYearParams struct {
	OrganizationID uuid.UUID
	Year           int32
}

func (q *Queries) CreateFinancialYear(ctx context.Context, arg CreateFinancialYearParams) error {
	_, err := q.db.ExecContext(ctx, createFinancialYear, arg.OrganizationID, arg.Year)
	return err
}

const createOrganization = `-- name: CreateOrganization :exec
INSERT INTO organizations (
	id,
	name,
	invoice_number_start
) VALUES (
	$1,
	$2,
	$3
)
`

type CreateOrganizationParams struct {
	ID                 uuid.UUID
	Name               string
	InvoiceNumberStart int32
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, createOrganization, arg.ID, arg.Name, arg.InvoiceNumberStart)
	return err
}

const createOrganizationUser = `-- name: CreateOrganizationUser :exec
INSERT INTO users_organizations (
	organization_id,
	user_id
) VALUES (
	$1,
	$2
)
`

type CreateOrganizationUserParams struct {
	OrganizationID uuid.UUID
	UserID         uuid.UUID
}

func (q *Queries) CreateOrganizationUser(ctx context.Context, arg CreateOrganizationUserParams) error {
	_, err := q.db.ExecContext(ctx, createOrganizationUser, arg.OrganizationID, arg.UserID)
	return err
}

const getAllInvoicesByOrganizationId = `-- name: GetAllInvoicesByOrganizationId :many
SELECT organization_id, number, financial_year, issue_date, name, email, phone, car_registration, total, is_vat FROM invoices WHERE organization_id = $1
`

func (q *Queries) GetAllInvoicesByOrganizationId(ctx context.Context, organizationID uuid.UUID) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, getAllInvoicesByOrganizationId, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.OrganizationID,
			&i.Number,
			&i.FinancialYear,
			&i.IssueDate,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.CarRegistration,
			&i.Total,
			&i.IsVat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProductsByInvoiceId = `-- name: GetAllProductsByInvoiceId :many
SELECT id, invoice_number, organization_id, serial, description, quantity, rate, total FROM invoice_products WHERE organization_id = $1 AND invoice_number = $2
`

type GetAllProductsByInvoiceIdParams struct {
	OrganizationID uuid.UUID
	InvoiceNumber  int32
}

func (q *Queries) GetAllProductsByInvoiceId(ctx context.Context, arg GetAllProductsByInvoiceIdParams) ([]InvoiceProduct, error) {
	rows, err := q.db.QueryContext(ctx, getAllProductsByInvoiceId, arg.OrganizationID, arg.InvoiceNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InvoiceProduct
	for rows.Next() {
		var i InvoiceProduct
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceNumber,
			&i.OrganizationID,
			&i.Serial,
			&i.Description,
			&i.Quantity,
			&i.Rate,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFinancialYearsByUserIdOrganizationId = `-- name: GetFinancialYearsByUserIdOrganizationId :many
SELECT
  financial_years.year
FROM
  financial_years
  JOIN users_organizations ON users_organizations.user_id = $1
  AND users_organizations.organization_id = financial_years.organization_id
WHERE financial_years.organization_id = $2
`

type GetFinancialYearsByUserIdOrganizationIdParams struct {
	UserID         uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) GetFinancialYearsByUserIdOrganizationId(ctx context.Context, arg GetFinancialYearsByUserIdOrganizationIdParams) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getFinancialYearsByUserIdOrganizationId, arg.UserID, arg.OrganizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var year int32
		if err := rows.Scan(&year); err != nil {
			return nil, err
		}
		items = append(items, year)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizationByUserId = `-- name: GetOrganizationByUserId :one
SELECT id, name, invoice_number_start, organization_id, user_id FROM organizations JOIN users_organizations ON organizations.id = users_organizations.organization_id AND users_organizations.user_id = $1
`

type GetOrganizationByUserIdRow struct {
	ID                 uuid.UUID
	Name               string
	InvoiceNumberStart int32
	OrganizationID     uuid.UUID
	UserID             uuid.UUID
}

func (q *Queries) GetOrganizationByUserId(ctx context.Context, userID uuid.UUID) (GetOrganizationByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByUserId, userID)
	var i GetOrganizationByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InvoiceNumberStart,
		&i.OrganizationID,
		&i.UserID,
	)
	return i, err
}
